// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid())
  email    String  @unique
  name     String?
  password String?
}

model Barber {
  id           String        @id @default(uuid())
  email        String
  name         String?
  number_phone String?
  title        String?
  img_url      String?
  services     Service[]
  Appointment  Appointment[]
}

model Service {
  id          String        @id @default(uuid())
  name        String?
  description String?
  price       Float?
  barbers     Barber[]
  Appointment Appointment[]
}

model Client {
  id           String        @id @default(uuid())
  name         String?
  number_phone String?       @unique
  address      String?
  password     String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Appointment  Appointment[]
  Invoice      Invoice[]
}

model Appointment {
  id         String    @id @default(uuid())
  date       DateTime
  time       String?
  status     String?
  date_start DateTime
  date_end   DateTime
  total      Decimal?
  services   Service[]
  client     Client?   @relation(fields: [clientId], references: [id])
  clientId   String?
  barber     Barber?   @relation(fields: [barberId], references: [id])
  barberId   String
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
}

model Product {
  id            String          @id @default(uuid())
  code          Int             @unique @default(autoincrement())
  description   String
  quantity      Int
  price         Float
  cost          Float
  isActive      Boolean?        @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  InvoiceDetail InvoiceDetail[]
}

model InvoiceDetail {
  id          String   @id @default(uuid())
  product     Product? @relation(fields: [productId], references: [id])
  invoice     Invoice  @relation(fields: [invoiceId], references: [id] )
  quantity    Int
  price_unit  Float
  price_total Float
  productId   String?
  invoiceId   String
}

model Invoice {
  id   String @id @default(uuid())
  code Int    @unique @default(autoincrement())

  client         Client?         @relation(fields: [clientId], references: [id])
  clientId       String?
  total          Float
  status         String?
  payment_method String?
  date           DateTime?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  InvoiceDetail  InvoiceDetail[]
}

model CashMovement {
  id      String    @id @default(uuid())
  date    DateTime?
  entry   Float?
  exit    Float?
  concept String?
}
